// Normal communication sequence
// C                           S
// | ------ Handshake -------->|
// | <------- Ack -------------|
// |                           |
// | ----- fetch tree -------->|
// | <---- set of leaves ------|
// | <---- fetch done ---------|
// |                           |
// | ------ get hash <<>> ---->|
// | <----- hash --------------|

message MerkleMsg {
  enum Type { HANDSHAKE_REQ = 1;
              ACK_RESP = 2;
              FETCH_REQ = 3;
              LEAVES_RESP = 4;
              FETCHDONE_MSG = 5;
              GETHASH_REQ = 6;
              HASH_RESP = 7;
              ERROR_MSG = 8; }

  required Type type = 1;

  optional HandshakeReq handshakereq = 2;
  optional AckResp ackresp = 3;
  optional FetchReq fetchreq = 4;
  optional LeavesResp leavesresp = 5;
  optional FetchDoneMsg fetchdonemsg = 6;
  optional GetHashReq gethashreq = 7;
  optional HashResp hahsresp = 8;
  optional ErrorMsg errormsg = 9;
}

message Pair {
  required bytes key = 1;
  required bytes val = 2;
}

// Handshake
message HandshakeReq {
  required uint32 major_version = 1;
  required uint32 minor_version = 2;
  repeated Pair options = 3;
}

// Handshake ack
message AckResp {
}

message Pos {
  required bytes pos = 1;
  required uint32 num_bits = 2;
}

// Fetch Tree
message FetchReq {
  required Pos pos = 1;
}

message Leaf {
  required Pos pos = 1;
  required bytes data = 2;
}

message LeavesResp {
  repeated Leaf leaves = 1;
}

// Fetch Done
message FetchDoneMsg {
}

// get hash (pos)
message GetHashReq {
  required Pos pos = 1;
}

message HashResp {
  required Pos pos = 1;
  required bytes hash = 2;
}

// Error
message ErrorMsg {
  required uint32 code  = 1;
  optional string msg   = 2;
}
